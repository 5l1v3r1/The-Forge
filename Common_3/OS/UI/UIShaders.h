/*
 * Copyright (c) 2018 Confetti Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#if defined(DIRECT3D12)
const char* builtin_plain = R"(
cbuffer uniformBlockVS : register(b0)
{
	float4 scaleBias;
};

float4 VSMain(float2 position : Position) : SV_POSITION
{
	return float4 (position.xy * scaleBias.xy + scaleBias.zw, 0.0f, 1.0f);
};

cbuffer uniformBlockPS : register(b1)
{
	float4 color;
};

float4 PSMain() : SV_Target
{
	return color;
};
)";

const char* builtin_textured = R"(
struct VsIn
{
	float2 position: Position;
	float2 texCoord: TEXCOORD0;
};

struct PsIn
{
	float4 position: SV_Position;
	float2 texCoord: TEXCOORD0;
	float4 ScaledTexCoord: TEXCOORD1;
};

cbuffer uniformBlockVS : register(b0)
{
	float4 scaleBias;
	float2 TextureSize;
};

PsIn VSMain(VsIn In)
{
	PsIn Out;
	Out.position = float4 (In.position, 0.0f, 1.0f);
	Out.ScaledTexCoord.xy = In.texCoord * TextureSize;
	Out.position.xy = Out.position.xy * scaleBias.xy + scaleBias.zw;
	Out.texCoord = In.texCoord;
	return Out;
};

#if (SAMPLE_COUNT > 1)
Texture2DMS uTex0 : register(t2);
#else
Texture2D uTex0 : register(t2);
#endif
SamplerState uSampler0 : register(s3);

cbuffer uniformBlockPS : register(b1)
{
	float4 color;
};

float4 PSMain(PsIn In) : SV_Target
{
#if (SAMPLE_COUNT > 1)
	float4 value = 0;

	uint3 texCoord = uint3(In.ScaledTexCoord.xy, 0);
	for (int i = 0; i < SAMPLE_COUNT; ++i)
		value += uTex0.Load(texCoord, i);
	value /= SAMPLE_COUNT;

	return float4(value.xyz, 1.0f) * color;
#else
    return float4(uTex0.Sample(uSampler0, In.texCoord).xyz, 1.0f) * color;
#endif
};
)";

const char* builtin_textured_red_alpha = R"(
struct PsIn
{
	float4 position: SV_Position;
	float2 texCoord: TEXCOORD0;
	float4 ScaledTexCoord: TEXCOORD1;
};

Texture2D uTex0: register(t2);
SamplerState uSampler0: register(s3);

cbuffer uniformBlockPS : register(b1)
{
	float4 color;
};

float4 PSMain(PsIn In) : SV_Target
{
    return float4(1.0, 1.0, 1.0, uTex0.Sample(uSampler0, In.texCoord).r) * color;
};
)";
#elif defined(VULKAN)
/*
#version 450 core

layout(location = 0) in vec2 position;

layout (set=0, binding=0) uniform uniformBlockVS
{
uniform vec4 scaleBias;
};

void main( void )
{
gl_Position = vec4 (position, 0.0f, 1.0f);
gl_Position.xy = gl_Position.xy * scaleBias.xy + scaleBias.zw;
}
*/
// Overload400-PrecQual.2000 12-Apr-2017
#pragma once
const uint32_t builtin_plain_vert[] = {
	0x07230203,0x00010000,0x00080002,0x0000002d,0x00000000,0x00020011,0x00000001,0x0006000b,
	0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,
	0x0007000f,0x00000000,0x00000004,0x6e69616d,0x00000000,0x0000000d,0x00000012,0x00030003,
	0x00000002,0x000001c2,0x00040005,0x00000004,0x6e69616d,0x00000000,0x00060005,0x0000000b,
	0x505f6c67,0x65567265,0x78657472,0x00000000,0x00060006,0x0000000b,0x00000000,0x505f6c67,
	0x7469736f,0x006e6f69,0x00070006,0x0000000b,0x00000001,0x505f6c67,0x746e696f,0x657a6953,
	0x00000000,0x00070006,0x0000000b,0x00000002,0x435f6c67,0x4470696c,0x61747369,0x0065636e,
	0x00070006,0x0000000b,0x00000003,0x435f6c67,0x446c6c75,0x61747369,0x0065636e,0x00030005,
	0x0000000d,0x00000000,0x00050005,0x00000012,0x69736f70,0x6e6f6974,0x00000000,0x00060005,
	0x0000001e,0x66696e75,0x426d726f,0x6b636f6c,0x00005356,0x00060006,0x0000001e,0x00000000,
	0x6c616373,0x61694265,0x00000073,0x00030005,0x00000020,0x00000000,0x00050048,0x0000000b,
	0x00000000,0x0000000b,0x00000000,0x00050048,0x0000000b,0x00000001,0x0000000b,0x00000001,
	0x00050048,0x0000000b,0x00000002,0x0000000b,0x00000003,0x00050048,0x0000000b,0x00000003,
	0x0000000b,0x00000004,0x00030047,0x0000000b,0x00000002,0x00040047,0x00000012,0x0000001e,
	0x00000000,0x00050048,0x0000001e,0x00000000,0x00000023,0x00000000,0x00030047,0x0000001e,
	0x00000002,0x00040047,0x00000020,0x00000022,0x00000000,0x00040047,0x00000020,0x00000021,
	0x00000000,0x00020013,0x00000002,0x00030021,0x00000003,0x00000002,0x00030016,0x00000006,
	0x00000020,0x00040017,0x00000007,0x00000006,0x00000004,0x00040015,0x00000008,0x00000020,
	0x00000000,0x0004002b,0x00000008,0x00000009,0x00000001,0x0004001c,0x0000000a,0x00000006,
	0x00000009,0x0006001e,0x0000000b,0x00000007,0x00000006,0x0000000a,0x0000000a,0x00040020,
	0x0000000c,0x00000003,0x0000000b,0x0004003b,0x0000000c,0x0000000d,0x00000003,0x00040015,
	0x0000000e,0x00000020,0x00000001,0x0004002b,0x0000000e,0x0000000f,0x00000000,0x00040017,
	0x00000010,0x00000006,0x00000002,0x00040020,0x00000011,0x00000001,0x00000010,0x0004003b,
	0x00000011,0x00000012,0x00000001,0x0004002b,0x00000006,0x00000014,0x00000000,0x0004002b,
	0x00000006,0x00000015,0x3f800000,0x00040020,0x00000019,0x00000003,0x00000007,0x0003001e,
	0x0000001e,0x00000007,0x00040020,0x0000001f,0x00000002,0x0000001e,0x0004003b,0x0000001f,
	0x00000020,0x00000002,0x00040020,0x00000021,0x00000002,0x00000007,0x00050036,0x00000002,
	0x00000004,0x00000000,0x00000003,0x000200f8,0x00000005,0x0004003d,0x00000010,0x00000013,
	0x00000012,0x00050051,0x00000006,0x00000016,0x00000013,0x00000000,0x00050051,0x00000006,
	0x00000017,0x00000013,0x00000001,0x00070050,0x00000007,0x00000018,0x00000016,0x00000017,
	0x00000014,0x00000015,0x00050041,0x00000019,0x0000001a,0x0000000d,0x0000000f,0x0003003e,
	0x0000001a,0x00000018,0x00050041,0x00000019,0x0000001b,0x0000000d,0x0000000f,0x0004003d,
	0x00000007,0x0000001c,0x0000001b,0x0007004f,0x00000010,0x0000001d,0x0000001c,0x0000001c,
	0x00000000,0x00000001,0x00050041,0x00000021,0x00000022,0x00000020,0x0000000f,0x0004003d,
	0x00000007,0x00000023,0x00000022,0x0007004f,0x00000010,0x00000024,0x00000023,0x00000023,
	0x00000000,0x00000001,0x00050085,0x00000010,0x00000025,0x0000001d,0x00000024,0x00050041,
	0x00000021,0x00000026,0x00000020,0x0000000f,0x0004003d,0x00000007,0x00000027,0x00000026,
	0x0007004f,0x00000010,0x00000028,0x00000027,0x00000027,0x00000002,0x00000003,0x00050081,
	0x00000010,0x00000029,0x00000025,0x00000028,0x00050041,0x00000019,0x0000002a,0x0000000d,
	0x0000000f,0x0004003d,0x00000007,0x0000002b,0x0000002a,0x0009004f,0x00000007,0x0000002c,
	0x0000002b,0x00000029,0x00000004,0x00000005,0x00000002,0x00000003,0x0003003e,0x0000002a,
	0x0000002c,0x000100fd,0x00010038
};

/*
#version 450 core

layout (location = 0) out vec4 oColor;

layout (set=0, binding=1) uniform uniformBlockPS
{
uniform vec4 color;
};

void main( void )
{
oColor = color;
}
*/
// Overload400-PrecQual.2000 12-Apr-2017
#pragma once
const uint32_t builtin_plain_frag[] = {
	0x07230203,0x00010000,0x00080002,0x00000012,0x00000000,0x00020011,0x00000001,0x0006000b,
	0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,
	0x0006000f,0x00000004,0x00000004,0x6e69616d,0x00000000,0x00000009,0x00030010,0x00000004,
	0x00000007,0x00030003,0x00000002,0x000001c2,0x00040005,0x00000004,0x6e69616d,0x00000000,
	0x00040005,0x00000009,0x6c6f436f,0x0000726f,0x00060005,0x0000000a,0x66696e75,0x426d726f,
	0x6b636f6c,0x00005350,0x00050006,0x0000000a,0x00000000,0x6f6c6f63,0x00000072,0x00030005,
	0x0000000c,0x00000000,0x00040047,0x00000009,0x0000001e,0x00000000,0x00050048,0x0000000a,
	0x00000000,0x00000023,0x00000000,0x00030047,0x0000000a,0x00000002,0x00040047,0x0000000c,
	0x00000022,0x00000000,0x00040047,0x0000000c,0x00000021,0x00000001,0x00020013,0x00000002,
	0x00030021,0x00000003,0x00000002,0x00030016,0x00000006,0x00000020,0x00040017,0x00000007,
	0x00000006,0x00000004,0x00040020,0x00000008,0x00000003,0x00000007,0x0004003b,0x00000008,
	0x00000009,0x00000003,0x0003001e,0x0000000a,0x00000007,0x00040020,0x0000000b,0x00000002,
	0x0000000a,0x0004003b,0x0000000b,0x0000000c,0x00000002,0x00040015,0x0000000d,0x00000020,
	0x00000001,0x0004002b,0x0000000d,0x0000000e,0x00000000,0x00040020,0x0000000f,0x00000002,
	0x00000007,0x00050036,0x00000002,0x00000004,0x00000000,0x00000003,0x000200f8,0x00000005,
	0x00050041,0x0000000f,0x00000010,0x0000000c,0x0000000e,0x0004003d,0x00000007,0x00000011,
	0x00000010,0x0003003e,0x00000009,0x00000011,0x000100fd,0x00010038
};

/*
#version 450 core

layout (location = 0) in vec2 position;
layout (location = 1) in vec2 texCoord;

layout (set=0, binding=0) uniform uniformBlockVS
{
uniform vec4 scaleBias;
uniform vec2 TextureSize;
};

layout (location=0) out vec2 texcoord;

void main( void )
{
gl_Position = vec4 (position, 0.0f, 1.0f);
gl_Position.xy = gl_Position.xy * scaleBias.xy + scaleBias.zw;
texcoord = texCoord;
}
*/
// Overload400-PrecQual.2000 12-Apr-2017
#pragma once
const uint32_t builtin_textured_vert[] = {
	0x07230203,0x00010000,0x00080002,0x00000031,0x00000000,0x00020011,0x00000001,0x0006000b,
	0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,
	0x0009000f,0x00000000,0x00000004,0x6e69616d,0x00000000,0x0000000d,0x00000012,0x0000002e,
	0x0000002f,0x00030003,0x00000002,0x000001c2,0x00040005,0x00000004,0x6e69616d,0x00000000,
	0x00060005,0x0000000b,0x505f6c67,0x65567265,0x78657472,0x00000000,0x00060006,0x0000000b,
	0x00000000,0x505f6c67,0x7469736f,0x006e6f69,0x00070006,0x0000000b,0x00000001,0x505f6c67,
	0x746e696f,0x657a6953,0x00000000,0x00070006,0x0000000b,0x00000002,0x435f6c67,0x4470696c,
	0x61747369,0x0065636e,0x00070006,0x0000000b,0x00000003,0x435f6c67,0x446c6c75,0x61747369,
	0x0065636e,0x00030005,0x0000000d,0x00000000,0x00050005,0x00000012,0x69736f70,0x6e6f6974,
	0x00000000,0x00060005,0x0000001e,0x66696e75,0x426d726f,0x6b636f6c,0x00005356,0x00060006,
	0x0000001e,0x00000000,0x6c616373,0x61694265,0x00000073,0x00060006,0x0000001e,0x00000001,
	0x74786554,0x53657275,0x00657a69,0x00030005,0x00000020,0x00000000,0x00050005,0x0000002e,
	0x63786574,0x64726f6f,0x00000000,0x00050005,0x0000002f,0x43786574,0x64726f6f,0x00000000,
	0x00050048,0x0000000b,0x00000000,0x0000000b,0x00000000,0x00050048,0x0000000b,0x00000001,
	0x0000000b,0x00000001,0x00050048,0x0000000b,0x00000002,0x0000000b,0x00000003,0x00050048,
	0x0000000b,0x00000003,0x0000000b,0x00000004,0x00030047,0x0000000b,0x00000002,0x00040047,
	0x00000012,0x0000001e,0x00000000,0x00050048,0x0000001e,0x00000000,0x00000023,0x00000000,
	0x00050048,0x0000001e,0x00000001,0x00000023,0x00000010,0x00030047,0x0000001e,0x00000002,
	0x00040047,0x00000020,0x00000022,0x00000000,0x00040047,0x00000020,0x00000021,0x00000000,
	0x00040047,0x0000002e,0x0000001e,0x00000000,0x00040047,0x0000002f,0x0000001e,0x00000001,
	0x00020013,0x00000002,0x00030021,0x00000003,0x00000002,0x00030016,0x00000006,0x00000020,
	0x00040017,0x00000007,0x00000006,0x00000004,0x00040015,0x00000008,0x00000020,0x00000000,
	0x0004002b,0x00000008,0x00000009,0x00000001,0x0004001c,0x0000000a,0x00000006,0x00000009,
	0x0006001e,0x0000000b,0x00000007,0x00000006,0x0000000a,0x0000000a,0x00040020,0x0000000c,
	0x00000003,0x0000000b,0x0004003b,0x0000000c,0x0000000d,0x00000003,0x00040015,0x0000000e,
	0x00000020,0x00000001,0x0004002b,0x0000000e,0x0000000f,0x00000000,0x00040017,0x00000010,
	0x00000006,0x00000002,0x00040020,0x00000011,0x00000001,0x00000010,0x0004003b,0x00000011,
	0x00000012,0x00000001,0x0004002b,0x00000006,0x00000014,0x00000000,0x0004002b,0x00000006,
	0x00000015,0x3f800000,0x00040020,0x00000019,0x00000003,0x00000007,0x0004001e,0x0000001e,
	0x00000007,0x00000010,0x00040020,0x0000001f,0x00000002,0x0000001e,0x0004003b,0x0000001f,
	0x00000020,0x00000002,0x00040020,0x00000021,0x00000002,0x00000007,0x00040020,0x0000002d,
	0x00000003,0x00000010,0x0004003b,0x0000002d,0x0000002e,0x00000003,0x0004003b,0x00000011,
	0x0000002f,0x00000001,0x00050036,0x00000002,0x00000004,0x00000000,0x00000003,0x000200f8,
	0x00000005,0x0004003d,0x00000010,0x00000013,0x00000012,0x00050051,0x00000006,0x00000016,
	0x00000013,0x00000000,0x00050051,0x00000006,0x00000017,0x00000013,0x00000001,0x00070050,
	0x00000007,0x00000018,0x00000016,0x00000017,0x00000014,0x00000015,0x00050041,0x00000019,
	0x0000001a,0x0000000d,0x0000000f,0x0003003e,0x0000001a,0x00000018,0x00050041,0x00000019,
	0x0000001b,0x0000000d,0x0000000f,0x0004003d,0x00000007,0x0000001c,0x0000001b,0x0007004f,
	0x00000010,0x0000001d,0x0000001c,0x0000001c,0x00000000,0x00000001,0x00050041,0x00000021,
	0x00000022,0x00000020,0x0000000f,0x0004003d,0x00000007,0x00000023,0x00000022,0x0007004f,
	0x00000010,0x00000024,0x00000023,0x00000023,0x00000000,0x00000001,0x00050085,0x00000010,
	0x00000025,0x0000001d,0x00000024,0x00050041,0x00000021,0x00000026,0x00000020,0x0000000f,
	0x0004003d,0x00000007,0x00000027,0x00000026,0x0007004f,0x00000010,0x00000028,0x00000027,
	0x00000027,0x00000002,0x00000003,0x00050081,0x00000010,0x00000029,0x00000025,0x00000028,
	0x00050041,0x00000019,0x0000002a,0x0000000d,0x0000000f,0x0004003d,0x00000007,0x0000002b,
	0x0000002a,0x0009004f,0x00000007,0x0000002c,0x0000002b,0x00000029,0x00000004,0x00000005,
	0x00000002,0x00000003,0x0003003e,0x0000002a,0x0000002c,0x0004003d,0x00000010,0x00000030,
	0x0000002f,0x0003003e,0x0000002e,0x00000030,0x000100fd,0x00010038
};

/*
#version 450 core

layout (location = 0) in vec2 texcoord;

layout (location = 0) out vec4 oColor;

layout (set=0, binding=1) uniform uniformBlockPS
{
uniform vec4 color;
};

layout (set=0, binding=2) uniform texture2D uTex0;
layout (set=0, binding=3) uniform sampler uSampler0;

void main(void)
{
oColor = vec4(texture(sampler2D(uTex0, uSampler0), texcoord).xyz, 1.0f) * color;
}
*/
// Overload400-PrecQual.2000 12-Apr-2017
#pragma once
const uint32_t builtin_textured_frag[] = {
	0x07230203,0x00010000,0x00080002,0x00000029,0x00000000,0x00020011,0x00000001,0x0006000b,
	0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,
	0x0007000f,0x00000004,0x00000004,0x6e69616d,0x00000000,0x00000009,0x00000016,0x00030010,
	0x00000004,0x00000007,0x00030003,0x00000002,0x000001c2,0x00040005,0x00000004,0x6e69616d,
	0x00000000,0x00040005,0x00000009,0x6c6f436f,0x0000726f,0x00040005,0x0000000c,0x78655475,
	0x00000030,0x00050005,0x00000010,0x6d615375,0x72656c70,0x00000030,0x00050005,0x00000016,
	0x63786574,0x64726f6f,0x00000000,0x00060005,0x00000020,0x66696e75,0x426d726f,0x6b636f6c,
	0x00005350,0x00050006,0x00000020,0x00000000,0x6f6c6f63,0x00000072,0x00030005,0x00000022,
	0x00000000,0x00040047,0x00000009,0x0000001e,0x00000000,0x00040047,0x0000000c,0x00000022,
	0x00000000,0x00040047,0x0000000c,0x00000021,0x00000002,0x00040047,0x00000010,0x00000022,
	0x00000000,0x00040047,0x00000010,0x00000021,0x00000003,0x00040047,0x00000016,0x0000001e,
	0x00000000,0x00050048,0x00000020,0x00000000,0x00000023,0x00000000,0x00030047,0x00000020,
	0x00000002,0x00040047,0x00000022,0x00000022,0x00000000,0x00040047,0x00000022,0x00000021,
	0x00000001,0x00020013,0x00000002,0x00030021,0x00000003,0x00000002,0x00030016,0x00000006,
	0x00000020,0x00040017,0x00000007,0x00000006,0x00000004,0x00040020,0x00000008,0x00000003,
	0x00000007,0x0004003b,0x00000008,0x00000009,0x00000003,0x00090019,0x0000000a,0x00000006,
	0x00000001,0x00000000,0x00000000,0x00000000,0x00000001,0x00000000,0x00040020,0x0000000b,
	0x00000000,0x0000000a,0x0004003b,0x0000000b,0x0000000c,0x00000000,0x0002001a,0x0000000e,
	0x00040020,0x0000000f,0x00000000,0x0000000e,0x0004003b,0x0000000f,0x00000010,0x00000000,
	0x0003001b,0x00000012,0x0000000a,0x00040017,0x00000014,0x00000006,0x00000002,0x00040020,
	0x00000015,0x00000001,0x00000014,0x0004003b,0x00000015,0x00000016,0x00000001,0x00040017,
	0x00000019,0x00000006,0x00000003,0x0004002b,0x00000006,0x0000001b,0x3f800000,0x0003001e,
	0x00000020,0x00000007,0x00040020,0x00000021,0x00000002,0x00000020,0x0004003b,0x00000021,
	0x00000022,0x00000002,0x00040015,0x00000023,0x00000020,0x00000001,0x0004002b,0x00000023,
	0x00000024,0x00000000,0x00040020,0x00000025,0x00000002,0x00000007,0x00050036,0x00000002,
	0x00000004,0x00000000,0x00000003,0x000200f8,0x00000005,0x0004003d,0x0000000a,0x0000000d,
	0x0000000c,0x0004003d,0x0000000e,0x00000011,0x00000010,0x00050056,0x00000012,0x00000013,
	0x0000000d,0x00000011,0x0004003d,0x00000014,0x00000017,0x00000016,0x00050057,0x00000007,
	0x00000018,0x00000013,0x00000017,0x0008004f,0x00000019,0x0000001a,0x00000018,0x00000018,
	0x00000000,0x00000001,0x00000002,0x00050051,0x00000006,0x0000001c,0x0000001a,0x00000000,
	0x00050051,0x00000006,0x0000001d,0x0000001a,0x00000001,0x00050051,0x00000006,0x0000001e,
	0x0000001a,0x00000002,0x00070050,0x00000007,0x0000001f,0x0000001c,0x0000001d,0x0000001e,
	0x0000001b,0x00050041,0x00000025,0x00000026,0x00000022,0x00000024,0x0004003d,0x00000007,
	0x00000027,0x00000026,0x00050085,0x00000007,0x00000028,0x0000001f,0x00000027,0x0003003e,
	0x00000009,0x00000028,0x000100fd,0x00010038
};

/*
#version 450 core

layout (location = 0) in vec2 texcoord;

layout (location = 0) out vec4 oColor;

layout (set=0, binding=1) uniform uniformBlockPS
{
uniform vec4 color;
};

layout (set=0, binding=2) uniform texture2D uTex0;
layout (set=0, binding=3) uniform sampler uSampler0;

void main(void)
{
oColor = texture(sampler2D(uTex0, uSampler0), texcoord).r * color;
}
*/
// Overload400-PrecQual.2000 12-Apr-2017
#pragma once
const uint32_t builtin_textured_red_alpha_frag[] = {
	0x07230203,0x00010000,0x00080002,0x00000025,0x00000000,0x00020011,0x00000001,0x0006000b,
	0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,
	0x0007000f,0x00000004,0x00000004,0x6e69616d,0x00000000,0x00000009,0x00000016,0x00030010,
	0x00000004,0x00000007,0x00030003,0x00000002,0x000001c2,0x00040005,0x00000004,0x6e69616d,
	0x00000000,0x00040005,0x00000009,0x6c6f436f,0x0000726f,0x00040005,0x0000000c,0x78655475,
	0x00000030,0x00050005,0x00000010,0x6d615375,0x72656c70,0x00000030,0x00050005,0x00000016,
	0x63786574,0x64726f6f,0x00000000,0x00060005,0x0000001c,0x66696e75,0x426d726f,0x6b636f6c,
	0x00005350,0x00050006,0x0000001c,0x00000000,0x6f6c6f63,0x00000072,0x00030005,0x0000001e,
	0x00000000,0x00040047,0x00000009,0x0000001e,0x00000000,0x00040047,0x0000000c,0x00000022,
	0x00000000,0x00040047,0x0000000c,0x00000021,0x00000002,0x00040047,0x00000010,0x00000022,
	0x00000000,0x00040047,0x00000010,0x00000021,0x00000003,0x00040047,0x00000016,0x0000001e,
	0x00000000,0x00050048,0x0000001c,0x00000000,0x00000023,0x00000000,0x00030047,0x0000001c,
	0x00000002,0x00040047,0x0000001e,0x00000022,0x00000000,0x00040047,0x0000001e,0x00000021,
	0x00000001,0x00020013,0x00000002,0x00030021,0x00000003,0x00000002,0x00030016,0x00000006,
	0x00000020,0x00040017,0x00000007,0x00000006,0x00000004,0x00040020,0x00000008,0x00000003,
	0x00000007,0x0004003b,0x00000008,0x00000009,0x00000003,0x00090019,0x0000000a,0x00000006,
	0x00000001,0x00000000,0x00000000,0x00000000,0x00000001,0x00000000,0x00040020,0x0000000b,
	0x00000000,0x0000000a,0x0004003b,0x0000000b,0x0000000c,0x00000000,0x0002001a,0x0000000e,
	0x00040020,0x0000000f,0x00000000,0x0000000e,0x0004003b,0x0000000f,0x00000010,0x00000000,
	0x0003001b,0x00000012,0x0000000a,0x00040017,0x00000014,0x00000006,0x00000002,0x00040020,
	0x00000015,0x00000001,0x00000014,0x0004003b,0x00000015,0x00000016,0x00000001,0x00040015,
	0x00000019,0x00000020,0x00000000,0x0004002b,0x00000019,0x0000001a,0x00000000,0x0003001e,
	0x0000001c,0x00000007,0x00040020,0x0000001d,0x00000002,0x0000001c,0x0004003b,0x0000001d,
	0x0000001e,0x00000002,0x00040015,0x0000001f,0x00000020,0x00000001,0x0004002b,0x0000001f,
	0x00000020,0x00000000,0x00040020,0x00000021,0x00000002,0x00000007,0x00050036,0x00000002,
	0x00000004,0x00000000,0x00000003,0x000200f8,0x00000005,0x0004003d,0x0000000a,0x0000000d,
	0x0000000c,0x0004003d,0x0000000e,0x00000011,0x00000010,0x00050056,0x00000012,0x00000013,
	0x0000000d,0x00000011,0x0004003d,0x00000014,0x00000017,0x00000016,0x00050057,0x00000007,
	0x00000018,0x00000013,0x00000017,0x00050051,0x00000006,0x0000001b,0x00000018,0x00000000,
	0x00050041,0x00000021,0x00000022,0x0000001e,0x00000020,0x0004003d,0x00000007,0x00000023,
	0x00000022,0x0005008e,0x00000007,0x00000024,0x00000023,0x0000001b,0x0003003e,0x00000009,
	0x00000024,0x000100fd,0x00010038
};
#elif defined(METAL)
const char* builtin_plain = R"(
#include <metal_stdlib>
using namespace metal;

struct UniformBlock0
{
	float4 scaleBias;
};

struct VSIn
{
   float4 position [[attribute(0)]];
};

struct VSOut
{
   float4 position [[position]];
};

vertex VSOut VSMain(VSIn vsin [[stage_in]], constant UniformBlock0& uniformBlockVS [[buffer(0)]]){
 VSOut vsout;
 vsout.position = float4 (vsin.position.xy * uniformBlockVS.scaleBias.xy + uniformBlockVS.scaleBias.zw, 0.0f, 1.0f);
 return vsout;
};

struct UniformBlock1
{
	float4 color;
};

fragment float4 PSMain( constant UniformBlock1& uniformBlockPS [[buffer(1)]]) {
  return uniformBlockPS.color;
}
)";

const char* builtin_textured = R"(
#include <metal_stdlib>
using namespace metal;

struct VsIn {
 float2 position [[attribute(0)]];
 float2 texCoord [[attribute(1)]];
};

struct PsIn {
 float4 position [[position]];
 float2 texCoord;
 float4 ScaledTexCoord;
};

struct UniformBlock0
{
	float4 scaleBias;
	float2 TextureSize;
};

vertex PsIn VSMain(VsIn In [[stage_in]], constant UniformBlock0& uniformBlockVS [[buffer(0)]]){
	PsIn Out;
	Out.position = float4 (In.position, 0.0f, 1.0f);
	Out.ScaledTexCoord.xy = In.texCoord * uniformBlockVS.TextureSize;
	Out.position.xy = Out.position.xy * uniformBlockVS.scaleBias.xy + uniformBlockVS.scaleBias.zw;
	Out.texCoord = In.texCoord;
	return Out;
}

struct UniformBlock1
{
	float4 color;
};

fragment float4 PSMain(PsIn In [[stage_in]],
                       texture2d<float,access::sample> uTex0 [[texture(2)]],
                       sampler uSampler0 [[sampler(3)]],
                       constant UniformBlock1& uniformBlockPS [[buffer(1)]])
{
	return uTex0.sample(uSampler0, In.texCoord) * uniformBlockPS.color;
};
)";

const char* builtin_textured_red_alpha = R"(
#include <metal_stdlib>
using namespace metal;

struct PsIn {
	float4 position [[position]];
	float2 texCoord;
	float4 ScaledTexCoord;
};

struct UniformBlock0
{
	float4 color;
};

fragment float4 PSMain(PsIn In [[stage_in]], texture2d<float,access::sample> uTex0 [[texture(2)]], sampler uSampler0 [[sampler(3)]], constant UniformBlock0& uniformBlockPS [[buffer(1)]]) {
	return float4(1.0, 1.0, 1.0, uTex0.sample(uSampler0, In.texCoord).r) * uniformBlockPS.color;
};
)";
#endif